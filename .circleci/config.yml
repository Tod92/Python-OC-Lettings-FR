# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1


# Define a common Docker container and environment for jobs
executors:
  docker-publisher:
    # Define the image tag
    environment:
      IMAGE_TAG: tod92/oc-lettings
    # Use `docker:stable` as the Docker image for this executor
    docker:
      - image: docker:stable

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  test-and-lint:
    docker:
      - image: cimg/python:3.10.1
    steps:
      - checkout
      - run:
          name: install dependencies
          command: pip install -r requirements.txt
      - run:
          name: lint
          command: flake8
      - run:
          name: run tests
          command: pytest
  build-docker:
    executor: docker-publisher
    steps:
      # Checkout the repository files
      - checkout
      # Set up a separate Docker environment to run `docker` commands in
      - setup_remote_docker
      - run:
          name: Build Docker image
          command:
            docker build --tag $IMAGE_TAG .
      - run:
          name: Push Docker image
          command: |
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $IMAGE_TAG:latest
  deploy:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - run :
          name: Build and push Docker image to Heroku
          command: |
            curl https://cli-assets.heroku.com/install.sh | sh
            HEROKU_API_KEY=$HEROKU_API_KEY heroku container:login
            HEROKU_API_KEY=$HEROKU_API_KEY heroku container:push -a oc-lettings-demo web
            HEROKU_API_KEY=$HEROKU_API_KEY heroku container:release -a oc-lettings-demo web       

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  test-and-build-workflow:
    jobs:
      - test-and-lint
      - build-docker:
          requires:
            - test-and-lint
          filters:
            branches:
              only:
                - main
      - deploy:  
          requires:
            - build-docker
          filters:
            branches:
              only:
                - main